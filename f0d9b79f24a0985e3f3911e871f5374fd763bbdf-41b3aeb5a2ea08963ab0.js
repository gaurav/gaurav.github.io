(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"/H/W":function(e){e.exports=JSON.parse('{"@context":{"schema":"http://schema.org/","subjectOf":"schema:subjectOf","hasRole":"example:hasRole","name":"schema:name","location":"schema:location"},"@type":"schema:Person","@id":"https://www.ggvaidya.com/","projects":[{"@type":"schema:Project","role":"#Semantics-web-technologist-the-Renaissance-Computing-Institute-(RENCI)-at-Chapel-Hill-North-Carolina-USA","startDate":"2019-10-21","endDate":"2020-12-20","name":"CCDH","description":"I work on the CCDH Tools and Data Quality team at RENCI. We aim to develop software tools that will allow the validation of biomedical data against the CRDC-H data model to store cancer-related biomedical data, to publish and transform the data model into different formats as needed, and to fulfil any other software development tasks that are needed to complete this project.","products":[{"@id":"https://github.com/cancerDHC/csv2caDSR","@type":"schema:SoftwareSourceCode","startDate":"2020-07-28","endDate":"2020-12-04","name":"csv2caDSR","description":"A tool for harmonizing biomedical data using the Cancer Data Standards Registry and Repository (caDSR) as a source of validation information.","codeRepository":"https://github.com/cancerDHC/csv2caDSR","technologies":["Scala","caDSR","PFB","CEDAR Workbench"],"features":["Harmonize input data against the caDSR.","Store harmonization information (such as mappings from values in data files to concepts in vocabularies) in a JSON format that can be converted into other mapping formats if needed.","Export harmonized data in a variety of formats, such as the Portable Format for Biomedical Data (PFB) and the CEDAR Instance format."]},{"@id":"https://github.com/cancerDHC/umls-rrf-scala","@type":"schema:SoftwareSourceCode","startDate":"2020-03-30","endDate":"2020-11-04","name":"UMLS-RRF-Scala","description":"A set of tools for identifying mappings from terms in one vocabulary to others, intending to be used to provide mappings from closed-source vocabularies to open-access vocabularies.","codeRepository":"https://github.com/cancerDHC/umls-rrf-scala","technologies":["Scala","UMLS","SSSOM"],"features":["Extract individual mappings from the Unified Medical Language System (UMLS) Metathesaurus as SSSOM files.","Use web services (such as BioPortal and the EMBL-EBI Ontology Lookup Service) to find additional mappings between vocabularies."]}]},{"@type":"schema:Project","role":"#Semantics-web-technologist-the-Renaissance-Computing-Institute-(RENCI)-at-Chapel-Hill-North-Carolina-USA","startDate":"2019-10-21","endDate":"2020-12-20","name":"Small projects at RENCI","description":"While working as a Semantic Web technologist at RENCI, I developed a number of ad-hoc software tools to meet various needs from other RENCI teams.","products":[{"@id":"http://shacli.org/","@type":"schema:SoftwareSourceCode","startDate":"2019-10-30","endDate":"2020-05-26","name":"SHACLI","description":"A command-line interface (CLI) for the Shapes Constraint Language (SHACL) to validate RDF data against SHACL shapes with improved error messages. This was part of a project to simplify data model creation, so that one document can be used to produce both the documentation and can be used to validate input data.","codeRepository":"https://github.com/gaurav/shacli","technologies":["Scala","Apache Maven","Coursier","SHACL","RDF","web APIs"],"features":["Validate RDF data against SHACL shapes.","Improved error messages as compared to other SHACL validators.","Published to the Maven repository, so that it is easy to install via Coursier or other Maven tools."]},{"@id":"https://github.com/NCATS-Gamma/omnicorp","@type":"schema:SoftwareSourceCode","startDate":"2019-10-23","endDate":"2020-11-08","name":"Omnicorp and OmniCORD","description":"I built upon the existing Omnicorp tool to improve the RDF data being produced by it, such as authorship information. I also wrote OmniCORD, a variant of Omnicorp for extracting entities from the COVID-19 Open Research Dataset (CORD-19).","codeRepository":"https://github.com/NCATS-Gamma/omnicorp","technologies":["Scala","RDF","SHACL"],"features":["Extract terminologies from the MEDLINE/PubMed Baseline Repository and export them as RDF.","Extract terminologies from the COVID-19 Open Research Dataset (CORD-19) and export them as RDF.","Validate produced RDF information against SHACL shapes using SHACLI."]}]},{"@type":"schema:Project","role":"#Postdoctoral-associate-the-Florida-Museum-of-Natural-History-at-Gainesville-Florida-USA","startDate":"2018-01-02","endDate":"2019-10-11","name":"The Phyloreferencing Project","description":"The Phyloreferencing project aims to digitize definitions of clades (groups of related taxa that are a key concept in evolutionary biology) as semantically rich OWL ontologies, which are both human-readable and computer-interpretable.","products":[{"@id":"https://github.com/phyloref/phyx.js","@type":"schema:SoftwareSourceCode","startDate":"2019-01-18","name":"Phyx.js","description":"A software library for reading and validating Phyx files for storing clade definitions, which can convert them into OWL ontologies for publication and reasoning.","codeRepository":"https://github.com/phyloref/phyx.js","technologies":["JavaScript","NPM","Web Ontology Language","JSON","JSON-LD"],"features":["Read and validate Phyx files.","Convert Phyx files into OWL ontologies for publication and reasoning."]},{"@id":"https://github.com/phyloref/jphyloref","@type":"schema:SoftwareSourceCode","startDate":"2017-09-25","endDate":"2020-05-18","name":"JPhyloRef","description":"A Java-based command line tool for reasoning over and testing ontologies that include phyloreferences.","codeRepository":"https://github.com/phyloref/jphyloref","technologies":["Java","Web Ontology Language","JSON-LD","Software testing","web APIs"],"features":["Reason over ontologies containing phyloreferences and phylogenies to report on which nodes each phyloreference resolves to.","Test whether ontologies containing phyloreferences and reference phylogenies resolve as expected.","Run as a web server to serve a web API as a backend for Klados and other services."]},{"@id":"https://github.com/phyloref/klados","name":"Klados","@type":"schema:SoftwareSourceCode","startDate":"2020-08-02","endDate":"2017-10-12","technologies":["JavaScript","Vue.js","JSON","web APIs"]},{"@id":"https://github.com/phyloref/open-tree-resolver","name":"Open Tree Resolver","@type":"schema:SoftwareSourceCode","startDate":"2020-09-07","endDate":"2019-02-22","technologies":["JavaScript","Vue.js","web APIs"]},{"@id":"https://github.com/phyloref/phyloref-ontology","name":"Phyloref Ontology","@type":"schema:SoftwareSourceCode","startDate":"2013-06-12","endDate":"2020-11-19","technologies":["Web Ontology Language","ontologies"]},{"@id":"https://github.com/phyloref/clade-ontology","name":"Clade Ontology","@type":"schema:SoftwareSourceCode","startDate":"2017-06-20","endDate":"2020-05-22","technologies":["JavaScript","Web Ontology Language","ontologies"]}]},{"@type":"schema:Project","role":"#PhD-student-Ecology-and-Evolutionary-Biology-(EBIO)-at-Boulder-Colorado-USA","startDate":"2011-08-22","endDate":"2020-12-20","name":"PhD dissertation","description":"In my PhD dissertation, I developed methods for quantifying the rate of change with taxonomic checklists, and the effect such changes can have on the interpretation of biodiversity data.","products":[{"@id":"https://github.com/gaurav/scinames","@type":"schema:SoftwareSourceCode","startDate":"2019-05-26","endDate":"2017-04-30","name":"SciNames","description":"A graphical user interface (GUI) for processing changes among taxonomic checklists. SciNames imports multiple taxonomic checklists into a single XML file, and then generates lists of changes between those checklists. Users can then use the GUI to annotate these changes, recording why each change had occurred and what sort of change it was. SciNames can then calculate some statistics on the changes.","codeRepository":"https://github.com/gaurav/scinames","technologies":["Java","Java Swing","XML"],"features":["Convert taxonomic checklists into XML representations that store both multiple taxonomic checklists as well as annotated changes between them.","Provides a graphical user interface (GUI) showing changes between checklists and allowing those changes to be modified or annotated.","Calculates measures of stability among a series of checklists over time and exports data in formats amenable for rendering as graphs."]},{"@id":"https://doi.org/10.31237/osf.io/n2kh5"},{"@id":"https://doi.org/10.1371/journal.pone.0195736"},{"@id":"https://doi.org/10.3897/zookeys.420.7089"}]},{"@type":"schema:Project","role":"#Student-developer-DBpedia-at-Boulder-Colorado-USA","startDate":"2014-05-19","endDate":"2014-08-22","name":"DBpedia Commons at Google Summer of Code","description":"","products":[{"@id":"https://github.com/dbpedia/extraction-framework","@type":"schema:SoftwareSourceCode","startDate":"2014-05-31","endDate":"2014-08-18","name":"DBpedia Extraction Framework","description":"","codeRepository":"https://github.com/dbpedia/extraction-framework/commits?author=gaurav","technologies":["Scala","RDF"],"features":["Added support for extracting metadata regarding media files in the Wikimedia Commons, including links to the raw files themselves.","Added support for identifying templates that indicated open access licenses so that these could be included in the RDF generated.","Added support for extracting annotations for parts of an image and exporting those in RDF."]}]},{"@type":"schema:Project","role":"#Graduate-research-assistant-the-University-of-Colorado-Museum-of-Natural-History-at-Boulder-Colorado-USA","startDate":"2018-01-02","endDate":"2020-12-20","name":"TaxRefine","description":"","products":[{"@id":"http://shacli.org/","@type":"schema:SoftwareSourceCode","startDate":"2019-10-30","endDate":"2020-05-26","name":"SHACLI","description":"A command-line interface (CLI) for the Shapes Constraint Language (SHACL) to validate RDF data against SHACL shapes with improved error messages. This was part of a project to simplify data model creation, so that one document can be used to produce both the documentation and can be used to validate input data.","codeRepository":"https://github.com/gaurav/shacli","technologies":["Scala","SHACL","RDF"],"features":["Validate RDF data against SHACL shapes.","Improved error messages as compared to other SHACL validators.","Published to the Maven repository, so that it is easy to install via Coursier or other Maven tools."]},{"@id":"https://github.com/NCATS-Gamma/omnicorp","@type":"schema:SoftwareSourceCode","startDate":"2019-10-23","endDate":"2020-11-08","name":"Omnicorp and OmniCORD","description":"I built upon the existing Omnicorp tool to improve the RDF data being produced by it, such as authorship information. I also wrote OmniCORD, a variant of Omnicorp for extracting entities from the COVID-19 Open Research Dataset (CORD-19).","codeRepository":"https://github.com/NCATS-Gamma/omnicorp","technologies":["Scala","SSSOM","RDF"],"features":["Extract RDF information from the MEDLINE/PubMed Baseline Repository.","Extract RDF information from the COVID-19 Open Research Dataset (CORD-19).","Validate produced RDF information against SHACL shapes using SHACLI."]}]},{"@type":"schema:Project","role":"#Graduate-research-assistant-the-University-of-Colorado-Museum-of-Natural-History-at-Boulder-Colorado-USA","startDate":"2018-01-02","endDate":"2020-12-20","name":"Art of Life","description":"","products":[{"@id":"http://shacli.org/","@type":"schema:SoftwareSourceCode","startDate":"2019-10-30","endDate":"2020-05-26","name":"SHACLI","description":"A command-line interface (CLI) for the Shapes Constraint Language (SHACL) to validate RDF data against SHACL shapes with improved error messages. This was part of a project to simplify data model creation, so that one document can be used to produce both the documentation and can be used to validate input data.","codeRepository":"https://github.com/gaurav/shacli","technologies":["Scala","SHACL","RDF"],"features":["Validate RDF data against SHACL shapes.","Improved error messages as compared to other SHACL validators.","Published to the Maven repository, so that it is easy to install via Coursier or other Maven tools."]},{"@id":"https://github.com/NCATS-Gamma/omnicorp","@type":"schema:SoftwareSourceCode","startDate":"2019-10-23","endDate":"2020-11-08","name":"Omnicorp and OmniCORD","description":"I built upon the existing Omnicorp tool to improve the RDF data being produced by it, such as authorship information. I also wrote OmniCORD, a variant of Omnicorp for extracting entities from the COVID-19 Open Research Dataset (CORD-19).","codeRepository":"https://github.com/NCATS-Gamma/omnicorp","technologies":["Scala","SSSOM","RDF"],"features":["Extract RDF information from the MEDLINE/PubMed Baseline Repository.","Extract RDF information from the COVID-19 Open Research Dataset (CORD-19).","Validate produced RDF information against SHACL shapes using SHACLI."]}]},{"@type":"schema:Project","role":"#Software-architect-Paper-Terminal-Pte-Ltd-at-Singapore","startDate":"2018-01-02","endDate":"2020-12-20","name":"OCR Terminal","description":"","products":[{"@id":"http://shacli.org/","@type":"schema:SoftwareSourceCode","startDate":"2019-10-30","endDate":"2020-05-26","name":"SHACLI","description":"A command-line interface (CLI) for the Shapes Constraint Language (SHACL) to validate RDF data against SHACL shapes with improved error messages. This was part of a project to simplify data model creation, so that one document can be used to produce both the documentation and can be used to validate input data.","codeRepository":"https://github.com/gaurav/shacli","technologies":["Scala","SHACL","RDF"],"features":["Validate RDF data against SHACL shapes.","Improved error messages as compared to other SHACL validators.","Published to the Maven repository, so that it is easy to install via Coursier or other Maven tools."]},{"@id":"https://github.com/NCATS-Gamma/omnicorp","@type":"schema:SoftwareSourceCode","startDate":"2019-10-23","endDate":"2020-11-08","name":"Omnicorp and OmniCORD","description":"I built upon the existing Omnicorp tool to improve the RDF data being produced by it, such as authorship information. I also wrote OmniCORD, a variant of Omnicorp for extracting entities from the COVID-19 Open Research Dataset (CORD-19).","codeRepository":"https://github.com/NCATS-Gamma/omnicorp","technologies":["Scala","SSSOM","RDF"],"features":["Extract RDF information from the MEDLINE/PubMed Baseline Repository.","Extract RDF information from the COVID-19 Open Research Dataset (CORD-19).","Validate produced RDF information against SHACL shapes using SHACLI."]}]},{"@type":"schema:Project","role":"#Bachelor-of-Science-(with-Merit)-in-Life-Sciences-with-minors-in-Computational-Science-and-Economics-Department-of-Biological-Sciences-at-Singapore","startDate":"2003","endDate":"2006","name":"Species Identifier","description":"Species Identifier provides a set of tools for exploring intra- and interspecific genetic distances, matching sequences, and clustering sequences based on pairwise distances. It helps determine whether two sequences are likely conspecific based on pairwise distances, and can calculate pairwise distances for large datasets. It was designed to provide the analyses presented in Meier et al, 2006 (Best match, Best close match and All Species Barcodes).","products":[{"@id":"http://taxondna.sf.net/","@type":"schema:SoftwareSourceCode","startDate":"2006-08-20","endDate":"2015-06-22","name":"Species Identifier","codeRepository":"http://github.com/gaurav/taxondna","license":"https://www.wikidata.org/wiki/Q27016752","technologies":["Java","Apache Ant"],"features":["Replicate the techniques used in Meier et al. 2006 on your own datasets."]},{"@id":"https://doi.org/10.1080/10635150600969864"}]},{"@type":"schema:Project","role":"#Lab-officer-the-Evolutionary-Biology-Laboratory-at-Singapore","startDate":"2009-04","endDate":"2010-11-13","name":"Sequence Matrix","description":"Sequence Matrix facilitates the assembly of phylogenetic data matrices with multiple genes. Files for individual genes are dragged and dropped into a window and the sequences are concatenated. A table provides an overview over how much sequence information is available for the different genes and species. The user can request Sequence Matrix generate a wide variety of character and taxon sets (e.g. a taxon set with all species that have more than a specified number of genes or basepairs). The concatenated sequences can be exported in NEXUS or TNT format. Individual sequences can be excluded from being exported.","products":[{"@id":"http://gaurav.github.io/taxondna/","@type":"schema:SoftwareSourceCode","startDate":"2009-04-10","endDate":"2015-06-22","name":"Sequence Matrix","codeRepository":"http://github.com/gaurav/taxondna","license":"https://www.wikidata.org/wiki/Q27016752","technologies":["Java","Apache Ant","Java Swing"],"features":["Concatenating sequences from multiple genes for multiple taxa.","Records sequence start and end points so that they can be un-concatenated later if needed.","Includes tools for identifying unusual sequences and suppress them on export."]},{"@id":"https://doi.org/10.1111/j.1096-0031.2010.00329.x"}]}]}')},"/b8u":function(e,t,a){var o=a("STAE");e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},"6VoE":function(e,t,a){var o=a("tiKp"),i=a("P4y1"),n=o("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||r[n]===e)}},"7JVC":function(e){e.exports=JSON.parse('{"@context":{"schema":"http://schema.org/","example":"http://example.org/","subjectOf":"schema:subjectOf","hasRole":"example:hasRole","name":"schema:name","location":"schema:location","authored":"example:authored","authors":{"@id":"example:author","@container":"@list"}},"@type":"schema:Person","@id":"https://www.ggvaidya.com/","cites":[]}')},"7ySY":function(e){e.exports=JSON.parse('{"Scala":{"id":"Scala","@id":"https://www.scala-lang.org/","name":"Scala programming language","description":"A functional and object-oriented programming language built upon the Java Virtual Machine (JVM).","urls":["https://en.wikipedia.org/wiki/Scala_(programming_language)"]},"Java":{"id":"Java","@id":"https://java.com/","name":"Java programming language","description":"An object-oriented programming language.","urls":["https://en.wikipedia.org/wiki/Java_(programming_language)"]},"Java virtual machine":{"id":"Java virtual machine","@id":"https://en.wikipedia.org/wiki/Java_virtual_machine","name":"Java virtual machine","description":"A virtual machine for running Java programs. Many other languages, such as Scala, compile programs into Java bytecode so that they can run on the Java virtual machine.","seeAlso":["Java","Scala"]},"Apache Maven":{"id":"Apache Maven","@id":"https://maven.apache.org/","name":"Apache Maven","description":"A software packaging system for Java and Scala packages.","urls":["https://en.wikipedia.org/wiki/Apache_Maven"]},"Coursier":{"id":"Coursier","@id":"https://get-coursier.io/","name":"Coursier","description":"A tool for running Java virtual machine programs directly from Apache Maven repositories.","seeAlso":["Apache Maven","Java virtual machine"]},"Apache Ant":{"id":"Apache Ant","@id":"https://ant.apache.org/","name":"Apache Ant","description":"A build tool for Java.","urls":["https://en.wikipedia.org/wiki/Apache_Ant"],"seeAlso":["Java"]},"Java Swing":{"id":"Java Swing","@id":"https://en.wikipedia.org/wiki/Swing_(Java)","name":"Java Swing","description":"A graphical user interface (GUI) library for Java.","urls":[],"seeAlso":["Java"]},"JavaScript":{"id":"JavaScript","@id":"https://en.wikipedia.org/wiki/JavaScript","name":"JavaScript programming language","description":"A programming language often used to add interactivity to websites, but also capable of being used for any purpose through the Node.js runtime.","urls":["https://nodejs.org/"]},"NPM":{"id":"NPM","@id":"https://www.npmjs.com/","name":"NPM","description":"A package manager for the JavaScript programming language.","urls":["https://en.wikipedia.org/wiki/Npm_(software)"],"seeAlso":["JavaScript"]},"caDSR":{"id":"caDSR","@id":"https://datascience.cancer.gov/resources/metadata","name":"Cancer Data Standards Registry and Repository","description":"A database of field definitions used in cancer data.","seeAlso":["NCI Thesaurus","UMLS"]},"UMLS":{"id":"UMLS","@id":"https://www.nlm.nih.gov/research/umls/index.html","name":"Unified Medical Language System","description":"A database of mappings between multiple medical vocabularies.","urls":["https://en.wikipedia.org/wiki/Unified_Medical_Language_System"],"seeAlso":["NCI Thesaurus","caDSR"]},"RDF":{"id":"RDF","@id":"https://www.w3.org/RDF/","name":"Resource Description Framework","description":"A simple and flexible data model that forms the basis of technologies such as OWL.","urls":["https://en.wikipedia.org/wiki/Resource_Description_Framework"],"seeAlso":["Web Ontology Language"]},"Web Ontology Language":{"id":"Web Ontology Language","@id":"https://www.w3.org/OWL/","name":"Web Ontology Language","description":"An RDF-based language for authoring ontologies.","urls":["https://en.wikipedia.org/wiki/Web_Ontology_Language"],"seeAlso":["RDF","ontologies"]},"ontologies":{"id":"ontologies","@id":"https://en.wikipedia.org/wiki/Ontology_(information_science)","name":"ontologies","description":"An ontology is a formal representation of knowledge.","seeAlso":["Web Ontology Language"]},"SHACL":{"id":"SHACL","@id":"https://www.w3.org/TR/shacl/","name":"Shapes Constraint Language","description":"A W3 specification for describing and validating graph-based data.","seeAlso":["RDF","ShEx"]},"ShEx":{"id":"ShEx","@id":"https://shex.io/","name":"Shape Expressions","description":"A W3 specification for describing and validating graph-based data.","urls":["https://en.wikipedia.org/wiki/ShEx"],"seeAlso":["RDF","SHACL"]},"XML":{"id":"XML","@id":"https://www.w3.org/XML/","name":"Extensible Markup Language","description":"A simple, standard compliant data format for transfering data. Can be validated using the XML Schema language.","urls":["https://en.wikipedia.org/wiki/XML"]},"JSON":{"id":"JSON","@id":"https://www.json.org/","name":"JavaScript Object Notation","description":"A simple, standard compliant data format for transfering data. Can be validated using the JSON Schema language.","urls":["https://en.wikipedia.org/wiki/JSON"]},"JSON-LD":{"id":"JSON-LD","@id":"https://www.w3.org/XML/","name":"JavaScript Object Notation for Linked Data","description":"A specification for JSON documents that allows them to be read as RDF.","urls":["https://en.wikipedia.org/wiki/JSON-LD"],"seeAlso":["JSON","RDF"]},"PFB":{"id":"PFB","@id":"https://github.com/uc-cdis/pypfb","name":"Portable Format for Biomedical data","description":"An Apache Avro-based format for publishing biomedical data."},"CEDAR Workbench":{"id":"CEDAR Workbench","@id":"https://metadatacenter.org/","name":"CEDAR Workbench","description":"A software tool and associated formats for collecting and validating medical metadata."},"SSSOM":{"id":"SSSOM","@id":"https://github.com/OBOFoundry/SSSOM","name":"A Simple Standard for Sharing Ontology Mappings","description":"A simple TSV-based format for sharing mappings between concepts in different ontologies."},"Slurm Workload Manager":{"id":"Slurm Workload Manager","@id":"https://slurm.schedmd.com/","name":"Slurm Workload Manager","description":"A tool for managing jobs on a computer cluster.","urls":["https://en.wikipedia.org/wiki/Slurm_Workload_Manager"]},"Vue.js":{"id":"Vue.js","name":"Vue.js","@id":"https://vuejs.org/","description":"A JavaScript software library for creating and maintaining single-page web applications.","urls":["https://en.wikipedia.org/wiki/Vue.js"],"seeAlso":["JavaScript","NPM"]},"Software testing":{"id":"Software testing","@id":"https://en.wikipedia.org/wiki/Software_testing","name":"Software testing","description":"Software tools and techniques used to test whether other software tools are functioning correctly."},"web APIs":{"id":"web APIs","@id":"https://en.wikipedia.org/wiki/Web_API","name":"web APIs","description":"Any application programming interface (API) designed to be used over the World Wide Web, usually via the HTTP protocol."}}')},"9d/t":function(e,t,a){var o=a("AO7/"),i=a("xrYK"),n=a("tiKp")("toStringTag"),r="Arguments"==i(function(){return arguments}());e.exports=o?i:function(e){var t,a,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(a=function(e,t){try{return e[t]}catch(a){}}(t=Object(e),n))?a:r?i(t):"Object"==(o=i(t))&&"function"==typeof t.callee?"Arguments":o}},A2ZE:function(e,t,a){var o=a("HAuM");e.exports=function(e,t,a){if(o(e),void 0===t)return e;switch(a){case 0:return function(){return e.call(t)};case 1:return function(a){return e.call(t,a)};case 2:return function(a,o){return e.call(t,a,o)};case 3:return function(a,o,i){return e.call(t,a,o,i)}}return function(){return e.apply(t,arguments)}}},"AO7/":function(e,t,a){var o={};o[a("tiKp")("toStringTag")]="z",e.exports="[object z]"===String(o)},GROH:function(e,t,a){"use strict";a.d(t,"a",(function(){return n})),a.d(t,"b",(function(){return r}));var o=a("q1tI"),i=a.n(o);function n(e){if(e){var t=e.addThe,a=e["@id"],o=e.name,n=e.location;if(o||a)return o?n?i.a.createElement("span",null,t&&"the ",i.a.createElement("a",{href:a,title:"Located at "+n},o)):i.a.createElement("span",null,t&&"the ",i.a.createElement("a",{href:a},o)):i.a.createElement("span",null,t&&"the ",i.a.createElement("a",{href:a},a));throw new Error("Organization "+e+" has neither a name nor a URL.")}}function r(e){if(!e)return"";var t=e.addThe,a=(e["@id"],e.name),o=e.location;if(a)return o?(t?"the ":"")+a+" at "+o:(t?"the ":"")+a;throw new Error("Organization "+e+" does not have a name.")}},ImZN:function(e,t,a){var o=a("glrk"),i=a("6VoE"),n=a("UMSQ"),r=a("A2ZE"),s=a("NaFW"),c=a("KmKo"),d=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,a){var l,h,p,u,m,g,f,w=a&&a.that,S=!(!a||!a.AS_ENTRIES),v=!(!a||!a.IS_ITERATOR),b=!(!a||!a.INTERRUPTED),y=r(t,w,1+S+b),D=function(e){return l&&c(l),new d(!0,e)},A=function(e){return S?(o(e),b?y(e[0],e[1],D):y(e[0],e[1])):b?y(e,D):y(e)};if(v)l=e;else{if("function"!=typeof(h=s(e)))throw TypeError("Target is not iterable");if(i(h)){for(p=0,u=n(e.length);u>p;p++)if((m=A(e[p]))&&m instanceof d)return m;return new d(!1)}l=h.call(e)}for(g=l.next;!(f=g.call(l)).done;){try{m=A(f.value)}catch(C){throw c(l),C}if("object"==typeof m&&m&&m instanceof d)return m}return new d(!1)}},KmKo:function(e,t,a){var o=a("glrk");e.exports=function(e){var t=e.return;if(void 0!==t)return o(t.call(e)).value}},NaFW:function(e,t,a){var o=a("9d/t"),i=a("P4y1"),n=a("tiKp")("iterator");e.exports=function(e){if(null!=e)return e[n]||e["@@iterator"]||i[o(e)]}},P4y1:function(e,t){e.exports={}},STAE:function(e,t,a){var o=a("0Dky");e.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!String(Symbol())}))},"T/XA":function(e,t,a){"use strict";a.d(t,"b",(function(){return h})),a.d(t,"a",(function(){return p}));var o=a("q1tI"),i=a.n(o),n=a("ExVU"),r=a("NmYn"),s=a.n(r),c=a("+0Gm"),d=a("uKGf"),l=a("U1hp");function h(e,t){return void 0===t&&(t="creative-work"),p(e,t,!1)}function p(e,t,a){if(void 0===t&&(t="creative-work"),void 0===a&&(a=!0),e){var o=e["@id"]||e.url,r=e.name||"Unnamed creative work",h=e["@type"],p=t+"-"+s()(e.name||o),u=e.startDate?n.DateTime.fromISO(e.startDate):void 0,m=e.endDate?n.DateTime.fromISO(e.endDate):void 0;switch(h){case"schema:SoftwareSourceCode":return i.a.createElement(i.a.Fragment,null,i.a.createElement("strong",null,"Software"),": ",i.a.createElement("a",{id:p,href:o},r),(u||m)&&i.a.createElement(i.a.Fragment,null," (",d.a(u,m),")"),e.description&&i.a.createElement(i.a.Fragment,null,": ",e.description)," ",i.a.createElement("a",{class:"section-link",href:"#"+p},"§"),a&&i.a.createElement("ul",{class:"compressed"},e.technologies&&i.a.createElement("li",null,"Technologies used: "," ",e.technologies.map((function(t,a){return i.a.createElement(i.a.Fragment,null,Object(l.a)(t),a<e.technologies.length-1&&", ")})),"."),e.features&&i.a.createElement("li",null,"Provides the following features:",i.a.createElement("ul",{class:"compressed"},e.features.map((function(e){return i.a.createElement("li",null,e)})))),e.codeRepository&&i.a.createElement("li",null,"Source code available at ",i.a.createElement("a",{href:e.codeRepository},e.codeRepository),"."),e.license&&i.a.createElement("li",null,"Released under the ",function(e){var t="object"==typeof e&&e["@id"]||e,a="object"==typeof e&&e.name||e;switch(t){case"https://www.wikidata.org/wiki/Q10513450":return i.a.createElement("a",{href:"https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html"},"GNU General Public License, version 2.0");case"https://www.wikidata.org/wiki/Q27016752":return i.a.createElement(i.a.Fragment,null,i.a.createElement("a",{href:"https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html"},"GNU General Public License, version 2.0")," or later");case"https://www.wikidata.org/wiki/Q10513445":return i.a.createElement("a",{href:"https://www.gnu.org/licenses/gpl-3.0.en.html"},"GNU General Public License, version 3.0");case"https://www.wikidata.org/wiki/Q27016754":return i.a.createElement(i.a.Fragment,null,i.a.createElement("a",{href:"https://www.gnu.org/licenses/gpl-3.0.en.html"},"GNU General Public License, version 3.0")," or later");default:return i.a.createElement("a",{href:e},a)}}(e.license),".")));case"http://okfnlabs.org/bibjson/":return i.a.createElement(i.a.Fragment,null,i.a.createElement("strong",{id:p},"Citation"),": ",c.a(e)," ",i.a.createElement("a",{class:"section-link",href:"#"+p},"§"));default:if(!o)throw new Error("Unable to render creative work without an '@id': "+e);return i.a.createElement(i.a.Fragment,null,i.a.createElement("strong",null,"Link"),": ",i.a.createElement("a",{id:p,href:o},r),(u||m)&&i.a.createElement(i.a.Fragment,null," (",d.a(u,m),")"),e.description&&i.a.createElement(i.a.Fragment,null,": ",e.description)," ",i.a.createElement("a",{class:"section-link",href:"#"+p},"§"))}}}},U1hp:function(e,t,a){"use strict";a.d(t,"a",(function(){return s}));var o=a("q1tI"),i=a.n(o),n=a("Wbzz"),r=a("7ySY");function s(e){var t=e;if(!r[e])throw new Error("Tag '"+e+"' referenced but not defined in 'data/tags.json'!");return i.a.createElement(n.Link,{to:"/tag/"+e},t)}},hBjN:function(e,t,a){"use strict";var o=a("wE6v"),i=a("m/L8"),n=a("XGwC");e.exports=function(e,t,a){var r=o(t);r in e?i.f(e,r,n(0,a)):e[r]=a}},tiKp:function(e,t,a){var o=a("2oRo"),i=a("VpIT"),n=a("UTVS"),r=a("kOOl"),s=a("STAE"),c=a("/b8u"),d=i("wks"),l=o.Symbol,h=c?l:l&&l.withoutSetter||r;e.exports=function(e){return n(d,e)||(s&&n(l,e)?d[e]=l[e]:d[e]=h("Symbol."+e)),d[e]}},trxo:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));a("wfmh");var o=function(){function e(){this.knownEntities={}}var t=e.prototype;return t.addEntitiesFromData=function(e){var t=this;if("object"==typeof e){var a=e["@id"];a&&(console.log("Found entity '",a,"': ",e),this.knownEntities[a]=e),Object.keys(e).map((function(a){return t.addEntitiesFromData(e[a])}))}},t.fillReferences=function(e){var t=this;if(Array.isArray(e))return e.map((function(e){return t.fillReferences(e)}));if("object"!=typeof e)return e;var a=Object.keys(e);return 1===a.length&&"@id"===a[0]&&(console.log("Found substitutable entity: ",e["@id"]),this.knownEntities[e["@id"]])?this.knownEntities[e["@id"]]:Object.fromEntries(a.map((function(a){return[a,t.fillReferences(e[a])]})))},e}()},wfmh:function(e,t,a){var o=a("I+eb"),i=a("ImZN"),n=a("hBjN");o({target:"Object",stat:!0},{fromEntries:function(e){var t={};return i(e,(function(e,a){n(t,e,a)}),{AS_ENTRIES:!0}),t}})}}]);
//# sourceMappingURL=f0d9b79f24a0985e3f3911e871f5374fd763bbdf-41b3aeb5a2ea08963ab0.js.map